Determine the validity of the following three statements. Circle either True or False.
1. Group functions work across many rows to produce one result per group.
    True

2. Group functions include nulls in calculations.
    False

3. The WHERE clause restricts rows prior to inclusion in a group calculation.
    True

4.Find the highest, lowest, sum, and average salary of all employees. Label the columns Maximum, Minimum, Sum, and Average, respectively.
Round your results to the nearest whole number. 

    SELECT
        ROUND(MAX(salary)) AS Maximum,
        ROUND(MIN(salary)) AS Minimum,
        ROUND(SUM(salary)) AS Sum,
        ROUND(AVG(salary)) AS Average
    FROM employees;

5.Modify the above query to display the minimum, maximum, sum, and average salary for each job type.

    SELECT
        job_id,
        ROUND(MAX(salary)) AS Maximum,
        ROUND(MIN(salary)) AS Minimum,
        ROUND(SUM(salary)) AS Sum,
        ROUND(AVG(salary)) AS Average
    FROM employees
    GROUP BY job_id;

6.Write a query to display the number of people with the same job. Generalize the query so that the
user in the HR department is prompted for a job title.

    SELECT
        job_id,
        COUNT(*) AS "Number of People"
    FROM employees
    WHERE job_id = :job_title
    GROUP BY job_id;

7. Determine the number of managers without listing them. Label the column Number
of Managers. Hint: Use the MANAGER_ID column to determine the number of
managers.

    SELECT
        COUNT(DISTINCT manager_id) AS "Number of Managers"
    FROM employees

8.Write a query that displays the difference between the highest and lowest salaries. Label the column DIFFERENCE. 

    SELECT
        ROUND(MAX(salary) - MIN(salary)) AS Difference
    FROM employees;

9.Create a report to display the manager number and the salary of the lowest-paid employee for that manager. Exclude anyone whose manager is not known. Exclude any
groups where the minimum salary is $6,000 or less. Sort the output in descending order of salary.

    SELECT
        manager_id,
        MIN(salary) AS "Lowest Salary"
    FROM employees
    WHERE manager_id IS NOT NULL
    GROUP BY manager_id
    HAVING MIN(salary) > 6000
    ORDER BY "Lowest Salary" DESC;

10. Create a query to display the total number of employees and, of that total, the number of employees hired in 1995, 1996, 1997, and 1998.
Create appropriate column headings.

    SELECT
        TO_CHAR(hire_date, 'YYYY') AS "Hiring Year",
        COUNT(*) AS "Total Hired"
    FROM employees
    GROUP BY TO_CHAR(hire_date, 'YYYY')
    ORDER BY "Hiring Year";

11. Create a matrix query to display the job, the salary for that job based on department number, and the total salary for that job, 
for departments 20, 50, 80, and 90, giving each column an appropriate heading.

    SELECT
        job_id,
        department_id,
        ROUND(AVG(salary)) AS "Average Salary",
        ROUND(SUM(salary)) AS "Total Salary"
    FROM employees
    WHERE department_id IN (20, 50, 80, 90)
    GROUP BY job_id, department_id;

12.Write a query to display each departmentâ€™s name, location, number of employees, and the average salary for all the employees in that department.
Label the column name-Location, Number of people, and salary respectively. Round the average salary to two decimal places.

    SELECT
        d.department_name || '-' || l.city AS "Name-Location",
        COUNT(*) AS "Number of People",
        ROUND(AVG(e.salary), 2) AS Salary
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id
    JOIN locations l ON d.location_id = l.location_id
    GROUP BY d.department_name, l.city;
